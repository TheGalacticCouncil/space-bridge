Timer unit: 1e-06 s

Total time: 1.78303 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: read at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                               @profile
    37                                               def read(self, counter=0):
    38                                                   '''
    39                                                   Reads the encoder state and increments
    40                                                   the counter accordingly.
    41                                           
    42                                                   Use increment() to make use of more
    43                                                   advanced features.
    44                                                   '''
    45                                           
    46     10194     531658.0     52.2     29.8          clockState = GPIO.input(self.clockPin)
    47     10194     417399.0     40.9     23.4          dtState = GPIO.input(self.dtPin)
    48                                           
    49     10194     322139.0     31.6     18.1          if clockState != self.previousClockState:
    50       241      13294.0     55.2      0.7              if dtState != clockState and dtState == 1:
    51        63       1410.0     22.4      0.1                  counter += 1
    52       178       7612.0     42.8      0.4              elif dtState == clockState and dtState == 1:
    53        70       1651.0     23.6      0.1                  counter -= 1
    54                                                       else:
    55                                                           pass
    56                                           
    57     10194     301725.0     29.6     16.9          self.previousClockState = clockState
    58                                           
    59     10194     186145.0     18.3     10.4          return counter

Total time: 0.033495 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: rescale at line 61

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    61                                               @profile
    62                                               def rescale(self, counter, delta):
    63                                                   '''Re-scales an input to requirement'''
    64       133       8877.0     66.7     26.5          counter += delta*self.step
    65       133       6958.0     52.3     20.8          if self.minimum != None and self.maximum != None:
    66       133      12552.0     94.4     37.5              if counter > self.maximum:
    67                                                           counter = self.maximum
    68       133       2792.0     21.0      8.3              if counter < self.minimum:
    69        11        208.0     18.9      0.6                  counter = self.minimum
    70       133       2108.0     15.8      6.3          return counter

Total time: 5.38062 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: increment at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                               @profile
    73                                               def increment(self, counter=None):
    74                                                   """
    75                                                   - Reads the encoder,
    76                                                   - increments the counter,
    77                                                   - rescales and
    78                                                   - returns the counter.
    79                                           
    80                                                   - Returns whether the counter
    81                                                     value has changed.
    82                                                   - The counter can be overridden
    83                                                     by giving a value as parameter.
    84                                                   """
    85                                           
    86                                                   # If no counter override is defined, self.counter is used
    87     10194     324663.0     31.8      6.0          if counter == None:
    88                                                       counter = self.counter
    89                                           
    90     10194     211631.0     20.8      3.9          changed=False
    91                                           
    92     10194    4011472.0    393.5     74.6          delta = EncoderInput.read(self)
    93                                           
    94                                                   # If input has changed
    95     10194     431549.0     42.3      8.0          if abs(delta) > 0:
    96       133       2582.0     19.4      0.0              changed = True
    97       133      61146.0    459.7      1.1              counter = EncoderInput.rescale(self, counter, delta)
    98                                           
    99       133       3600.0     27.1      0.1              self.counter = counter
   100       133       3355.0     25.2      0.1              return counter, changed, self.name
   101                                                   else:
   102     10061     330619.0     32.9      6.1              return self.counter, changed, self.name

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: event at line 35

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                               @profile
    36                                               def event(self, input_name, value):
    37                                                   '''
    38                                                   Formats the event input in to an event.
    39                                                   - Takes the input name and value as inputs
    40                                                   - Translates the input name to an event name
    41                                                   ...
    42                                                   '''
    43                                           
    44                                                   settings = InputConfig.settings(self.inputConfig)
    45                                           
    46                                                   # Collects event data
    47                                                   #
    48                                                   # A reminder:
    49                                                   # This implementation of POSIX returns a float.
    50                                                   # The default rounding used rounds "half down".
    51                                                   # Therefore the timestamp may be at most 0.1 ms
    52                                                   # too small.
    53                                           
    54                                                   posix = time.time() * 1000
    55                                                   event = {}
    56                                                   payload = {}
    57                                                   event_name = InputConfig.eventName(self.inputConfig , input_name)
    58                                           
    59                                                   # Makes the payload
    60                                                   #
    61                                                   # Dev. Status note:
    62                                                   # Currently supports only a single payload field
    63                                           
    64                                                   fields = self.eventConfig.event(event_name)
    65                                           
    66                                                   payload = EventMaker.payloader(input_name, value, fields, settings)
    67                                           
    68                                                   if payload == {}:
    69                                                       # If a secondary event is defined, the input is a binary
    70                                                       # input. Only values 1 and 0 are significant.
    71                                                       if "event2" in settings[input_name] and value == 0:
    72                                                           secondary_event = settings[input_name]["event2"]
    73                                                           event_name = secondary_event
    74                                                       ##else: Use the primary event_name, that was defined earlier.
    75                                           
    76                                                   # Formats the event
    77                                                   #
    78                                                   event["timestamp"] = int(posix)                 # "timestamp": "ms-from-epoch, number",
    79                                                   event["sourceComponent"] = "HwReader"            # "sourceComponent": "HwReader",
    80                                                   event["sourceIp"] = self.ip                      # "sourceIp": "We might need this",
    81                                                   event["event"] = event_name                      # "event": "SET_THROTTLE",
    82                                                   event["station"] = self.station                  # "station": "HELM",
    83                                                   event["payload"] = payload                       # "payload": {"value": 100}
    84                                           
    85                                                   return event

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: payloader at line 87

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    87                                               @profile
    88                                               def payloader(input_name, value, fields, settings):
    89                                                   '''
    90                                                   Packs the payload for the event
    91                                                   Searches the dict of events for payload configurations
    92                                                   and interprits how to combine it with the [value].
    93                                                   '''
    94                                                   payload = {}
    95                                           
    96                                                   try:
    97                                                       if "name" in fields[0]:
    98                                                           value_name = fields[0]["name"]
    99                                           
   100                                                           # Check if a [set_value] has been defined [value_name]
   101                                                           # It is used if defined.
   102                                                           if 'value' in settings[input_name]:
   103                                                               if value_name in settings[input_name]["value"]:
   104                                                                   set_value = settings[input_name]['value'][value_name]
   105                                                                   payload[value_name] = set_value
   106                                           
   107                                                           # If "possibleValues" are defined and no predefined
   108                                                           # value is set, cycles through the list.
   109                                                           # Uses [value] as index for [possible] values
   110                                                           elif "possibleValues" in fields[0]:
   111                                                               possible = fields[0]["possibleValues"]
   112                                                               payload[value_name] = possible[value]
   113                                           
   114                                                           # If nothing else, then the plain value is used
   115                                                           else:
   116                                                               payload[value_name] = value
   117                                           
   118                                                   ##else: The event is a plain event, no "value" or "payload" is delivered
   119                                                   except IndexError:
   120                                                       pass
   121                                           
   122                                                   return payload

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: run at line 124

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   124                                               @profile
   125                                               def run(self):
   126                                           
   127                                                   logger = Logger(__name__)
   128                                                   logger.info("EventMaker thread started")
   129                                           
   130                                                   # Configures the UDP-Sender and creates an instance
   131                                                   udpIP = self.inputConfig.udp_ip         #.255
   132                                                   udpPort = self.inputConfig.udp_port     #22100
   133                                           
   134                                                   udpSender = UdpSender(udpIP, udpPort)
   135                                           
   136                                                   try:
   137                                                       # Main Loop
   138                                                       while True:
   139                                           
   140                                                           start_time = time.time()
   141                                           
   142                                                           # Gets a new input message from queue
   143                                                           item = self.inputQueue.get()
   144                                                           ##print(" >>>", item[0], item[1])
   145                                           
   146                                                           # A new event is created
   147                                                           event = EventMaker.event(self, item[0], item[1])
   148                                           
   149                                                           # Prints a pretty json formatted event
   150                                                           #print(json.dumps(event, sort_keys=False, indent=4))
   151                                                           ##self.eventQueue.put(event)                        # If we decide to go with a threading solution
   152                                           
   153                                                           logger.info("Event created %s - %s" % (event["event"], str(event["payload"]).strip("{''}")))
   154                                           
   155                                                           end_time = time.time()
   156                                                           cycle_length = int((end_time - start_time) * 1000)
   157                                                           # logger.info("EventMaker cycle time: You were served in: %i ms" % cycle_length)
   158                                                           logger.debug("EventMaker cycle time: %i ms" % cycle_length)
   159                                           
   160                                           
   161                                                           start_time = time.time()
   162                                                           udpSender.run(json.dumps(event))    # SEND HERE #
   163                                                           end_time = time.time()
   164                                                           cycle_length = int((end_time - start_time) * 1000)
   165                                                           logger.debug("udpSender delivery time: %i ms" % cycle_length)
   166                                           
   167                                                           # Sends the message (single threaded)
   168                                                           udpSender.run(json.dumps(event))
   169                                           
   170                                                           # Sleeping is relevant only in TESTING.
   171                                                           # In use, the Tread runs as fast as it can
   172                                                           # and waits for the input queue...
   173                                                           # this should validated on a single core Pi-0-W
   174                                                           #sleep(self.cycleTime)
   175                                           
   176                                                   except KeyboardInterrupt:
   177                                                       pass
   178                                                   finally:
   179                                                       pass

Total time: 13.8818 s
File: /home/pi/space-bridge/HwReader/inputPoller.py
Function: run at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                               @profile
    34                                               def run(self):
    35                                           
    36         1      10751.0  10751.0      0.1          logger = Logger(__name__)
    37         1      13358.0  13358.0      0.1          logger.info("InputPoller thread started")
    38                                           
    39         1         35.0     35.0      0.0          q = 0   #Counter for a performance metric
    40                                           
    41                                                   # Analog Init
    42         1         29.0     29.0      0.0          a_value=[]
    43         2        164.0     82.0      0.0          for i in range(len(self.analogInput)):
    44         1         53.0     53.0      0.0              a_value.append(0)
    45                                           
    46                                                   # Encoder Init
    47         1         28.0     28.0      0.0          counter=[]
    48         3        119.0     39.7      0.0          for i in range(len(self.encoderInput)):
    49         2         73.0     36.5      0.0              counter.append(0)
    50                                           
    51                                           
    52                                                   # PERFORMANCE IMPROVEMENTS
    53                                                   # Precalculates ranges for polling "for" statements
    54                                                   #
    55         1         46.0     46.0      0.0          analog_range = range(len(self.analogInput))
    56         1         48.0     48.0      0.0          encoder_range = range(len(self.encoderInput))
    57         1         56.0     56.0      0.0          button_range = range(len(self.buttonInput))
    58         1         53.0     53.0      0.0          switch_range = range(len(self.switchInput))
    59                                                   #
    60                                                   #
    61                                                   # Converts class objects to local objects 
    62                                                   # to reduce refrencing and improve performance
    63                                                   #
    64         1         35.0     35.0      0.0          cycleTime = self.cycleTime
    65         1         30.0     30.0      0.0          analogInput = self.analogInput
    66         1         28.0     28.0      0.0          encoderInput = self.encoderInput
    67         1         28.0     28.0      0.0          buttonInput = self.buttonInput
    68         1         27.0     27.0      0.0          switchInput = self.switchInput
    69         1         28.0     28.0      0.0          inputQueue = self.inputQueue
    70                                           
    71         1         62.0     62.0      0.0          try:
    72                                           
    73                                                       # Main Loop
    74         1         26.0     26.0      0.0              while True:
    75                                           
    76      5097     210547.0     41.3      1.5                  start_time = time()
    77                                           
    78                                                           # POTENTIOMETER is read
    79                                                           #
    80                                                           # The operation is non-blocking.
    81                                                           # If the queue is full, the new value is discarded.
    82                                                           #
    83                                                           # This is done, because analog inputs generate a
    84                                                           # massive flow of new inputs for even a small change.
    85                                                           # Discarding a few intermediary values will not hurt
    86                                                           # accuarcy, but improves responciveness a great deal.
    87                                                           #
    88     10194     417977.0     41.0      3.0                  for i in analog_range:
    89      5097     903088.0    177.2      6.5                      a_value[i], changed, name = analogInput[i].readUpdate()
    90      5097     203353.0     39.9      1.5                      if changed == True:
    91                                                                   try:
    92                                                                       inputQueue.put_nowait([name, a_value[i]])
    93                                                                   except Full:
    94                                                                       pass
    95                                           
    96                                                           # ENCODER is read
    97                                                           #
    98                                                           # If a new value is received, purges the
    99                                                           # queue and adds a new entry to it.
   100                                                           # The operation is non-blocking.
   101                                                           #
   102     15291     552614.0     36.1      4.0                  for i in encoder_range:
   103     10194    8197523.0    804.2     59.1                      counter[i], changed, name = encoderInput[i].increment(counter[i])
   104     10194     430758.0     42.3      3.1                      if changed == True:
   105       133       3819.0     28.7      0.0                          try:
   106       133      62900.0    472.9      0.5                              inputQueue.get_nowait()
   107        95       9279.0     97.7      0.1                          except Empty:
   108        95       4470.0     47.1      0.0                              pass
   109       133      79021.0    594.1      0.6                          inputQueue.put([name, counter[i]])
   110                                           
   111                                                           # BUTTON is read
   112                                                           #
   113                                                           # A value is sent only if value is True.
   114                                                           # Only a single True is sent for a press
   115                                                           # Thus, the press must be registered properly!
   116                                                           # Button press is blocking and waits to deposit
   117                                                           # its value. (Sort of, but not exactly like an interrupt)
   118     10194     386455.0     37.9      2.8                  for i in button_range:
   119      5097     802998.0    157.5      5.8                      b_value, name = buttonInput[i].read()
   120      5097     202396.0     39.7      1.5                      if b_value == True:
   121                                                                   inputQueue.put([name, b_value])
   122                                           
   123                                                           # SWITCH is read
   124                                                           #
   125                                                           # A value is sent only if value is changed.
   126                                                           # Only a single signal is sent per press.
   127                                                           # Thus, the press must be registered properly!
   128                                                           # Button press is blocking and waits to deposit
   129                                                           # its value. (Sort of, but not exactly like an interrupt)
   130      5097     192808.0     37.8      1.4                  for i in switch_range:
   131                                                               s_value, name = switchInput[i].read()
   132                                                               if s_value == True or s_value == False:
   133                                                                   inputQueue.put([name, s_value])
   134                                                               else:
   135                                                                   pass    # Switch returns only a True on enable
   136                                                                           # False on disable and None when not changed
   137                                           
   138                                                           # PERFORMANCE METRICS
   139                                                           #
   140      5096     284511.0     55.8      2.0                  end_time = time()
   141      5096     225540.0     44.3      1.6                  cycle_length = (end_time - start_time)
   142      5096     204581.0     40.1      1.5                  if q >= 200:
   143        25        722.0     28.9      0.0                      q = 0
   144        25     106130.0   4245.2      0.8                      logger.debug("InputPoller cycle time: %i ns" % int(cycle_length * 1000 * 1000))
   145      5096     193425.0     38.0      1.4                  q += 1
   146                                           
   147      5096     181768.0     35.7      1.3                  if cycle_length < cycleTime:
   148                                                               sleep(cycleTime - cycle_length)
   149                                                           else:
   150                                                               #logger.debug("Cycle time exceeded: cycle %i ns" % int(cycle_length * 1000 * 1000))
   151                                                               #print((cycle_length * 1000 * 1000))
   152                                                               ###########################################################################
   153                                                               # Should we reserve some minimum sleep to give other threads time to run? #
   154                                                               ###########################################################################
   155                                                               pass
   156                                           
   157                                                   except KeyboardInterrupt:
   158                                                       pass
   159                                                   finally:
   160                                                       GPIO.cleanup()

