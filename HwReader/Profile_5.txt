Timer unit: 1e-06 s

Total time: 0 s
File: /home/pi/space-bridge/HwReader/AnalogReader.py
Function: readRaw at line 48

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    48                                               @profile
    49                                               def readRaw(self):
    50                                                   """
    51                                                   Reads the value and stores the old value in buffer
    52                                                   """
    53                                                   self.value = self.analogInput.value    # new value is read and stored
    54                                                   return self.value

Total time: 2.02199 s
File: /home/pi/space-bridge/HwReader/AnalogReader.py
Function: read at line 56

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    56                                               @profile
    57                                               def read(self):
    58                                                   """
    59                                                   Reads the raw value and:
    60                                                   - Rescales the input from [minimum] to [maximum].
    61                                                   - (no longer rounds, because it is redundent when
    62                                                     the value will be converted to int)
    63                                                   """
    64                                           
    65      1078    1791411.0   1661.8     88.6          value = self.analogInput.value          #self.analogInput.value
    66                                           
    67      1078      95407.0     88.5      4.7          clip_min = self.clip_min
    68                                           
    69                                                   # Scaling
    70      1078      57921.0     53.7      2.9          value = (value-clip_min)/(self.clip_max-clip_min)
    71                                           
    72                                                   #Clipping
    73      1078      29092.0     27.0      1.4          if value < 0.0:
    74        44        886.0     20.1      0.0              value = 0.0
    75      1034      23851.0     23.1      1.2          elif value > 1.0:
    76       212       4022.0     19.0      0.2              value = 1.0
    77                                           
    78                                                   # after processing is done, "value" is stored in "self.value"
    79                                                   # This is done despite it being done in readRaw, because
    80                                                   # this time the value is also filtered. The old value remains correct.
    81                                           
    82                                                   # self.value = value    # disabled for now. No real use, but a hit to performance
    83      1078      19399.0     18.0      1.0          return value

Total time: 0 s
File: /home/pi/space-bridge/HwReader/AnalogReader.py
Function: rescale at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                               @profile
    86                                               def rescale(self, value):
    87                                                   '''Re-scales an input to match the event format requirement'''
    88                                                   # self.value
    89                                                   # self.maximum
    90                                                   # self.minimum
    91                                                   value = value * (self.maximum-self.minimum) + self.minimum
    92                                                   return int(value)

Total time: 3.70967 s
File: /home/pi/space-bridge/HwReader/AnalogReader.py
Function: readUpdate at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                               @profile
    95                                               def readUpdate(self):
    96                                                   """
    97                                                   Returns the read value and whether it has changed from before, 
    98                                                   if trigger is active or 0.
    99                                                   """
   100      5433     209841.0     38.6      5.7          if self.trigger == 0:
   101                                                       return self.update()
   102                                                   else:
   103                                                       #GPIO.setmode(GPIO.BCM)                             # No need to setup again
   104      5433     514810.0     94.8     13.9              triggered = GPIO.input(self.trigger) == GPIO.LOW
   105      5433     108846.0     20.0      2.9              if triggered:
   106      1078    2734251.0   2536.4     73.7                  return self.update()
   107                                                       else:
   108      4355     141923.0     32.6      3.8                  return None, False, self.name

Total time: 2.47715 s
File: /home/pi/space-bridge/HwReader/AnalogReader.py
Function: update at line 110

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   110                                               @profile
   111                                               def update(self):
   112                                                   """
   113                                                   Returns the read value and whether it has changed from before.
   114                                                   """
   115      1078      22816.0     21.2      0.9          changed = False
   116                                           
   117      1078    2311017.0   2143.8     93.3          value = AnalogInput.read(self)                    #
   118                                           
   119      1078      41306.0     38.3      1.7          delta = abs(value - self.oldValue)
   120                                           
   121      1078      34177.0     31.7      1.4          if delta > self.threshold:
   122       405       8033.0     19.8      0.3              changed = True
   123                                                       #oldValue is updated only if changed = True
   124       405       9817.0     24.2      0.4              self.oldValue = value
   125                                                       # Value is rescaled and changed in to an int
   126                                                       # rescale() is not used for this, to avoid one extra call
   127                                                       # Value is rounded to int using int(). It is faster than round(), 
   128                                                       # though loses accuracy, as it is always rounded down.
   129       405      23008.0     56.8      0.9              value = int(value * (self.maximum-self.minimum) + self.minimum)
   130       405      10648.0     26.3      0.4              return value, changed, self.name
   131                                                   else:
   132       673      16330.0     24.3      0.7              return None, changed, self.name

Total time: 1.81968 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: read at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                               @profile
    37                                               def read(self, counter=0):
    38                                                   '''
    39                                                   Reads the encoder state and increments
    40                                                   the counter accordingly.
    41                                           
    42                                                   Use increment() to make use of more
    43                                                   advanced features.
    44                                                   '''
    45                                           
    46     10866     607503.0     55.9     33.4          clockState = GPIO.input(self.clockPin)
    47     10866     422859.0     38.9     23.2          dtState = GPIO.input(self.dtPin)
    48                                           
    49     10866     297203.0     27.4     16.3          if clockState != self.previousClockState:
    50       288       9723.0     33.8      0.5              if dtState != clockState:# and dtState == 1:
    51       152       3188.0     21.0      0.2                  counter += dtState                          # if dt state is 1, it is added
    52                                                       else: #elif dtState == clockState and dtState == 1:
    53       136       3715.0     27.3      0.2                  counter -= dtState                          # if dt state is 1, it is subtracted
    54                                                       # else:                                         # Default action for else is "nothing" anyway.
    55                                                       #     pass                                      # No need to write it
    56                                           
    57     10866     280662.0     25.8     15.4          self.previousClockState = clockState
    58                                           
    59     10866     194824.0     17.9     10.7          return counter

Total time: 0.025982 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: rescale at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               @profile
    63                                               def rescale(self, counter, delta):
    64                                                   '''Re-scales an input to requirement'''
    65                                           
    66       160      11453.0     71.6     44.1          counter += delta * self.step
    67       160       2950.0     18.4     11.4          try:        #if minimum != None and maximum != None:
    68       160       4323.0     27.0     16.6              if counter > self.maximum:
    69                                                           counter = self.maximum
    70       160       4471.0     27.9     17.2              elif counter < self.minimum:
    71         1         20.0     20.0      0.1                  counter = self.minimum
    72                                                   except TypeError:
    73                                                       pass
    74       160       2765.0     17.3     10.6          return counter

Total time: 5.18302 s
File: /home/pi/space-bridge/HwReader/EncoderReader.py
Function: increment at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @profile
    78                                               def increment(self, counter=None):
    79                                                   """
    80                                                   - Reads the encoder,
    81                                                   - increments the counter,
    82                                                   - rescales and
    83                                                   - returns the counter.
    84                                           
    85                                                   - Returns whether the counter
    86                                                     value has changed.
    87                                                   - The counter can be overridden
    88                                                     by giving a value as parameter.
    89                                                   """
    90                                           
    91                                                   # HIT TO PERFORMANCE. SUPPORT DISCONTINUED
    92                                                   # If no counter override is defined, self.counter is used
    93                                                   # if counter == None:
    94                                                   #     counter = self.counter
    95                                           
    96     10866     256191.0     23.6      4.9          changed=False
    97                                           
    98     10866    4174311.0    384.2     80.5          delta = EncoderInput.read(self)
    99                                           
   100                                                   # If input has changed
   101     10866     364287.0     33.5      7.0          if abs(delta) > 0:
   102       160       3140.0     19.6      0.1              changed = True
   103       160      65788.0    411.2      1.3              counter = EncoderInput.rescale(self, counter, delta)
   104                                           
   105                                                       #self.counter = counter
   106       160       4282.0     26.8      0.1              return counter, changed, self.name
   107                                                   else:
   108     10706     315021.0     29.4      6.1              return counter, changed, self.name

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: event at line 35

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                               @profile
    36                                               def event(self, input_name, value, settings):
    37                                                   '''
    38                                                   Formats the event input in to an event.
    39                                                   - Takes the input name and value as inputs
    40                                                   - Translates the input name to an event name
    41                                                   ...
    42                                                   '''
    43                                           
    44                                                   # Collects event data
    45                                                   #
    46                                                   # A reminder:
    47                                                   # This implementation of POSIX returns a float.
    48                                                   # The default rounding used rounds "half down".
    49                                                   # Therefore the timestamp may be at most 0.1 ms
    50                                                   # too small.
    51                                           
    52                                                   posix = time.time() * 1000
    53                                           
    54                                                   event_name = InputConfig.eventName(self.inputConfig, input_name)
    55                                           
    56                                                   # Makes the payload
    57                                                   #
    58                                                   # Dev. Status note:
    59                                                   # Currently supports only a single payload field
    60                                           
    61                                                   fields = self.eventConfig.event(event_name)
    62                                           
    63                                                   payload = EventMaker.payloader(input_name, value, fields[0], settings)
    64                                           
    65                                                   if payload == {}:
    66                                                       # If a secondary event is defined, the input is a binary
    67                                                       # input. Only values 1 and 0 are significant.
    68                                                       if "event2" in settings[input_name] and value == 0:
    69                                                           secondary_event = settings[input_name]["event2"]
    70                                                           event_name = secondary_event
    71                                                       ##else: Use the primary event_name, that was defined earlier.
    72                                           
    73                                                   # Formats the event
    74                                                   #
    75                                                   event = {"timestamp": int(posix),                 # "timestamp": "ms-from-epoch, number",
    76                                                           "sourceComponent": "HwReader",            # "sourceComponent": "HwReader",
    77                                                           "sourceIp": self.ip,                      # "sourceIp": "We might need this",
    78                                                           "event": event_name,                      # "event": "SET_THROTTLE",
    79                                                           "station": self.station,                  # "station": "HELM",
    80                                                           "payload": payload                       # "payload": {"value": 100}
    81                                                   }
    82                                                   return event

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: payloader at line 84

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                               @profile
    85                                               def payloader(input_name, value, fields, settings):
    86                                                   '''
    87                                                   Packs the payload for the event
    88                                                   Searches the dict of events for payload configurations
    89                                                   and interprits how to combine it with the [value].
    90                                                   '''
    91                                           
    92                                                   try:
    93                                                       if "name" in fields:
    94                                                           value_name = fields["name"]
    95                                                           input_setting = settings[input_name]
    96                                           
    97                                                           # Check if a [set_value] has been defined [value_name]
    98                                                           # It is used if defined.
    99                                                           if 'value' in input_setting:
   100                                                               if value_name in input_setting["value"]:
   101                                                                   set_value = input_setting['value'][value_name]
   102                                                                   payload = {value_name: set_value}
   103                                           
   104                                                           # If "possibleValues" are defined and no predefined
   105                                                           # value is set, cycles through the list.
   106                                                           # Uses [value] as index for [possible] values
   107                                                           elif "possibleValues" in fields:
   108                                                               possible = fields["possibleValues"]
   109                                                               payload = {value_name: possible[value]}
   110                                           
   111                                                           # If nothing else, then the plain value is used
   112                                                           else:
   113                                                               payload = {value_name: value}
   114                                           
   115                                                   ##else: The event is a plain event, no "value" or "payload" is delivered
   116                                                   except IndexError:
   117                                                       pass
   118                                           
   119                                                   return payload

Total time: 0 s
File: /home/pi/space-bridge/HwReader/EventMaker.py
Function: run at line 121

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   121                                               @profile
   122                                               def run(self):
   123                                           
   124                                                   logger = Logger(__name__)
   125                                                   logger.info("EventMaker thread started")
   126                                           
   127                                                   # Configures the UDP-Sender and creates an instance
   128                                                   udpIP = self.inputConfig.udp_ip         #.255
   129                                                   udpPort = self.inputConfig.udp_port     #22100
   130                                           
   131                                                   udpSender = UdpSender(udpIP, udpPort)
   132                                           
   133                                                   settings = InputConfig.settings(self.inputConfig)
   134                                           
   135                                                   try:
   136                                                       # Main Loop
   137                                                       while True:
   138                                           
   139                                                           start_time = time.time()
   140                                           
   141                                                           # Gets a new input message from queue
   142                                                           item = self.inputQueue.get()
   143                                                           ##print(" >>>", item[0], item[1])
   144                                           
   145                                                           # A new event is created
   146                                                           event = EventMaker.event(self, item[0], item[1], settings)
   147                                           
   148                                                           # Prints a pretty json formatted event
   149                                                           #print(json.dumps(event, sort_keys=False, indent=4))
   150                                                           ##self.eventQueue.put(event)                        # If we decide to go with a threading solution
   151                                           
   152                                                           logger.info("Event created %s - %s" % (event["event"], str(event["payload"]).strip("{''}")))
   153                                           
   154                                                           end_time = time.time()
   155                                                           cycle_length = int((end_time - start_time) * 1000)
   156                                                           # logger.info("EventMaker cycle time: You were served in: %i ms" % cycle_length)
   157                                                           logger.debug("EventMaker cycle time: %i ms" % cycle_length)
   158                                           
   159                                           
   160                                                           start_time = time.time()
   161                                                           udpSender.run(json.dumps(event))    # SEND HERE #
   162                                                           end_time = time.time()
   163                                                           cycle_length = int((end_time - start_time) * 1000)
   164                                                           logger.debug("udpSender delivery time: %i ms" % cycle_length)
   165                                           
   166                                                           # Sends the message (single threaded)
   167                                                           # udpSender.run(json.dumps(event))
   168                                           
   169                                                           # Sleeping is relevant only in TESTING.
   170                                                           # In use, the Tread runs as fast as it can
   171                                                           # and waits for the input queue...
   172                                                           # this should validated on a single core Pi-0-W
   173                                                           #sleep(self.cycleTime)
   174                                           
   175                                                   except KeyboardInterrupt:
   176                                                       pass
   177                                                   finally:
   178                                                       pass

Total time: 0 s
File: /home/pi/space-bridge/HwReader/KeyListener.py
Function: run at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               @profile
    19                                               def run(self):
    20                                                   input()                        # Wait for enter
    21                                                   self.inputQueue.put(False)      # When enter is pressed, send True
    22                                                   exit()

Total time: 0.792775 s
File: /home/pi/space-bridge/HwReader/buttonInput.py
Function: read at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                               @profile
    31                                               def read(self):
    32                                                   """
    33                                                   Reads the push button state.
    34                                                   Returns True, if the button is pressed. 
    35                                                   """
    36                                           
    37      5432     357033.0     65.7     45.0          state = GPIO.input(self.pin) == self.level          # Compares the input to a chosen level
    38                                                                                                       # Logic Hign or logic Low
    39      5432     133734.0     24.6     16.9          if state == True:
    40                                                       if state != self.last_state:
    41                                                           self.last_state = True
    42                                                           return True, self.name
    43                                                   else:
    44      5432     144276.0     26.6     18.2              self.last_state = False
    45                                                   
    46      5432     157732.0     29.0     19.9          return False, self.name

Total time: 0 s
File: /home/pi/space-bridge/HwReader/buttonInput.py
Function: read at line 63

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    63                                               @profile
    64                                               def read(self):
    65                                                   """
    66                                                   Reads the switch state.
    67                                                   Returns True, if the button is pressed. 
    68                                                   """
    69                                           
    70                                                   if self.invert == True:
    71                                                       state = GPIO.input(self.pin) == GPIO.LOW
    72                                                   else:
    73                                                       state = GPIO.input(self.pin) == GPIO.HIGH
    74                                           
    75                                                   if state == True:
    76                                                       if state != self.last_state:
    77                                                           self.last_state = True
    78                                                           return True, self.name
    79                                           
    80                                                   else:
    81                                                       if state != self.last_state:
    82                                                           self.last_state = False
    83                                                           return False, self.name
    84                                                   
    85                                                   return None, self.name

Total time: 0.02826 s
File: /home/pi/space-bridge/HwReader/eventConfig.py
Function: events at line 43

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                               @profile
    44                                               def events(self):
    45                                                   '''
    46                                                   Generates a dictinary of events
    47                                                   '''
    48         1      21673.0  21673.0     76.7          eventTypes = EventConfig.loadEvents(self)
    49                                           
    50                                                   # List comprehension performed poorly in the one-off type situation
    51                                                   # Performance loss was 10x
    52                                                   # events = {eventType["name"]: eventType["fields"] for eventType in eventTypes}
    53                                           
    54         1         33.0     33.0      0.1          events={}
    55        90       1559.0     17.3      5.5          for eventType in eventTypes:
    56        89       1609.0     18.1      5.7              eventName = eventType["name"]
    57        89       1552.0     17.4      5.5              eventData = eventType["fields"]
    58        89       1819.0     20.4      6.4              events[eventName] = eventData
    59                                           
    60         1         15.0     15.0      0.1          return events

Total time: 0 s
File: /home/pi/space-bridge/HwReader/eventConfig.py
Function: event at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               @profile
    63                                               def event(self, name):
    64                                                   '''
    65                                                   takes an event name as parameter and returns
    66                                                   the event format.
    67                                                   '''
    68                                                   return self._events[name]

Total time: 21.4235 s
File: /home/pi/space-bridge/HwReader/inputPoller.py
Function: run at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                               @profile
    34                                               def run(self):
    35                                           
    36         1       6709.0   6709.0      0.0          logger = Logger(__name__)
    37         1      25009.0  25009.0      0.1          logger.info("InputPoller thread started")
    38                                           
    39                                                   # PERFORMANCE IMPROVEMENTS
    40                                                   # Precalculates ranges for polling "for" statements
    41                                                   #
    42         1        112.0    112.0      0.0          analog_range = range(len(self.analogInput))
    43         1         56.0     56.0      0.0          encoder_range = range(len(self.encoderInput))
    44         1         47.0     47.0      0.0          button_range = range(len(self.buttonInput))
    45         1         56.0     56.0      0.0          switch_range = range(len(self.switchInput))
    46                                                   #
    47                                                   #
    48                                                   # Converts class objects to local objects 
    49                                                   # to reduce refrencing and improve performance
    50                                                   #
    51         1         36.0     36.0      0.0          cycleTime = self.cycleTime
    52         1         71.0     71.0      0.0          analogInput = self.analogInput
    53         1         32.0     32.0      0.0          encoderInput = self.encoderInput
    54         1         33.0     33.0      0.0          buttonInput = self.buttonInput
    55         1         32.0     32.0      0.0          switchInput = self.switchInput
    56         1         32.0     32.0      0.0          inputQueue = self.inputQueue
    57                                           
    58                                                   # Analog Init
    59         1        124.0    124.0      0.0          a_value = [0 for i in analog_range]
    60                                           
    61                                                   # Encoder Init
    62         1         78.0     78.0      0.0          counter = [0 for i in encoder_range]
    63                                           
    64         1        704.0    704.0      0.0          q = 0   #Counter for a performance metric
    65                                           
    66         1         47.0     47.0      0.0          try:
    67                                           
    68                                                       # Main Loop
    69         1         33.0     33.0      0.0              while True:
    70                                           
    71      5433     311286.0     57.3      1.5                  start_time = time()
    72                                           
    73                                                           # POTENTIOMETER is read
    74                                                           #
    75                                                           # The operation is non-blocking.
    76                                                           # If the queue is full, the new value is discarded.
    77                                                           #
    78                                                           # This is done, because analog inputs generate a
    79                                                           # massive flow of new inputs for even a small change.
    80                                                           # Discarding a few intermediary values will not hurt
    81                                                           # accuarcy, but improves responciveness a great deal.
    82                                                           #
    83     10866     559265.0     51.5      2.6                  for i in analog_range:
    84      5433    5955038.0   1096.1     27.8                      a_value[i], changed, name = analogInput[i].readUpdate()
    85      5433     251791.0     46.3      1.2                      if changed == True:
    86       405      13602.0     33.6      0.1                          try:
    87       405     345987.0    854.3      1.6                              inputQueue.put_nowait([name, a_value[i]])
    88       220      20852.0     94.8      0.1                          except Full:
    89       220      12387.0     56.3      0.1                              pass
    90                                           
    91                                                           # ENCODER is read
    92                                                           #
    93                                                           # If a new value is received, purges the
    94                                                           # queue and adds a new entry to it.
    95                                                           # The operation is non-blocking.
    96                                                           #
    97     16299     667420.0     40.9      3.1                  for i in encoder_range:
    98     10866    7991533.0    735.5     37.3                      counter[i], changed, name = encoderInput[i].increment(counter[i])
    99     10866     488320.0     44.9      2.3                      if changed == True:
   100       160       5158.0     32.2      0.0                          try:
   101       160      77773.0    486.1      0.4                              inputQueue.get_nowait()
   102       129       7218.0     56.0      0.0                          except Empty:
   103       129       6463.0     50.1      0.0                              pass
   104       160     116638.0    729.0      0.5                          inputQueue.put([name, counter[i]])
   105                                           
   106                                                           # BUTTON is read
   107                                                           #
   108                                                           # A value is sent only if value is True.
   109                                                           # Only a single True is sent for a press
   110                                                           # Thus, the press must be registered properly!
   111                                                           # Button press is blocking and waits to deposit
   112                                                           # its value. (Sort of, but not exactly like an interrupt)
   113     10865     469358.0     43.2      2.2                  for i in button_range:
   114      5432    2147864.0    395.4     10.0                      b_value, name = buttonInput[i].read()
   115      5432     323440.0     59.5      1.5                      if b_value == True:
   116                                                                   inputQueue.put([name, b_value])
   117                                           
   118                                                           # SWITCH is read
   119                                                           #
   120                                                           # A value is sent only if value is changed.
   121                                                           # Only a single signal is sent per press.
   122                                                           # Thus, the press must be registered properly!
   123                                                           # Button press is blocking and waits to deposit
   124                                                           # its value. (Sort of, but not exactly like an interrupt)
   125      5432     265987.0     49.0      1.2                  for i in switch_range:
   126                                                               s_value, name = switchInput[i].read()
   127                                                               if s_value == True or s_value == False:
   128                                                                   inputQueue.put([name, s_value])
   129                                                               else:
   130                                                                   pass    # Switch returns only a True on enable
   131                                                                           # False on disable and None when not changed
   132                                           
   133                                                           # PERFORMANCE METRICS
   134                                                           #
   135      5432     320609.0     59.0      1.5                  end_time = time()
   136      5432     244415.0     45.0      1.1                  cycle_length = (end_time - start_time)
   137      5432     224435.0     41.3      1.0                  if q >= 200:
   138        27        848.0     31.4      0.0                      q = 0
   139        27     120731.0   4471.5      0.6                      logger.debug("InputPoller cycle time: %i ns" % int(cycle_length * 1000 * 1000))
   140      5432     227896.0     42.0      1.1                  q += 1
   141                                           
   142      5432     214013.0     39.4      1.0                  if cycle_length < cycleTime:
   143                                                               sleep(cycleTime - cycle_length)
   144                                                           else:
   145                                                               #logger.debug("Cycle time exceeded: cycle %i ns" % int(cycle_length * 1000 * 1000))
   146                                                               #print((cycle_length * 1000 * 1000))
   147                                                               ###########################################################################
   148                                                               # Should we reserve some minimum sleep to give other threads time to run? #
   149                                                               ###########################################################################
   150                                                               pass
   151                                           
   152                                                   except KeyboardInterrupt:
   153                                                       pass
   154                                                   finally:
   155                                                       GPIO.cleanup()

Total time: 0 s
File: /home/pi/space-bridge/HwReader/udpSender.py
Function: run at line 22

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    22                                               @profile
    23                                               def run(self, message):
    24                                                   byte_message = bytearray(message,"utf-8")
    25                                                   self.sendto(byte_message, (self.broadcast_ip, self.port))

